var h=Object.create;var l=Object.defineProperty;var A=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var w=Object.getPrototypeOf,B=Object.prototype.hasOwnProperty;var T=(o,s)=>{for(var e in s)l(o,e,{get:s[e],enumerable:!0})},y=(o,s,e,t)=>{if(s&&typeof s=="object"||typeof s=="function")for(let i of S(s))!B.call(o,i)&&i!==e&&l(o,i,{get:()=>s[i],enumerable:!(t=A(s,i))||t.enumerable});return o};var v=(o,s,e)=>(e=o!=null?h(w(o)):{},y(s||!o||!o.__esModule?l(e,"default",{value:o,enumerable:!0}):e,o)),x=o=>y(l({},"__esModule",{value:!0}),o);var F={};T(F,{profissionalRoutes:()=>_});module.exports=x(F);var d=require("knex"),C={client:"pg",connection:{host:process.env.DATABASE_HOST,port:Number(process.env.DATABASE_PORT),user:process.env.DATABASE_USER,password:process.env.DATABASE_PASSWORD,database:process.env.DATABASE_NAME}},E=(0,d.knex)(C),c=E;var f=class{async getProfissionais(){try{return await c.select("*").from("profissional").where({ativo:1})}catch(s){return{status:500,messageClient:"Erro ao buscar profissionais !",messageServer:s}}}async postProfissional(s){try{return await c("profissional").insert(s),{status:201,messageClient:"Profissional criado com sucesso!"}}catch(e){return{status:500,messageClient:"Erro ao criar profissional !",messageServer:e}}}async putProfissional(s,e){try{return await c("profissional").where({cd_profissional:e}).update(s),{status:200,messageClient:"Profissional atualizado com sucesso!"}}catch(t){return{status:500,messageClient:"Erro ao atualizar profissional !",messageServer:t}}}},a=new f;var r=require("zod"),b=v(require("bcrypt")),P=r.z.object({data:r.z.object({cd_profissional:r.z.number().optional().nullable(),nm_profissional:r.z.string(),email:r.z.string().optional().nullable(),numero_telefone:r.z.string(),senha:r.z.string(),privilegio:r.z.string(),registro:r.z.string(),cd_tipo_profissional:r.z.number().optional().nullable(),ativo:r.z.string().optional().nullable()})}),u=class{async getProfissionais(s,e){try{let t=await a.getProfissionais();return e.status(200).send(t)}catch(t){return console.log(t),e.status(500).send({message:"Internal server error",messageError:t})}}async postProfissional(s,e){console.log(s.body);let{data:t}=P.parse(s.body);b.default.hash(t.senha,10,(i,n)=>{t.senha=n}),t.ativo="1";try{let i=await a.postProfissional(t);if(console.log(i),i.status===201){let n=await a.getProfissionais();return e.status(201).send(n)}if(i.status===500)return e.status(500).send(i)}catch{return}}async putProfissional(s,e){let{cd_profissional:t}=s.query,{data:i}=P.parse(s.body),n=new Object;for(let p in i)i[p]!=null&&(n[p]=i[p]);let m=await a.putProfissional(n,t);if(m.status===200){let p=await a.getProfissionais();return e.status(200).send(p)}if(m.status===500)return e.status(500).send(m)}};var R={description:"Route to get all profissional, returns some data about the situation.",tags:["Profissional"],response:{200:{description:"Successful response!",type:"array",properties:{message:{type:"string",description:"Application status message"},uptime:{type:"number",description:"Time the application has been up"},responseTime:{type:"number",description:"Response delay time"},timestamp:{type:"number",description:"Request date"}}},500:{description:"Application error!",type:"object",properties:{message:{type:"string",description:"Application error message"},uptime:{type:"number",description:"Time the application has been up"},responseTime:{type:"number",description:"Response delay time"},timestamp:{type:"number",description:"Request date"}}}}},g={description:"Route to create a profissional, returns some data about the situation.",tags:["Profissional"],response:{201:{description:"Successful response!",type:"array",properties:{message:{type:"string",description:"Application status message"},uptime:{type:"number",description:"Time the application has been up"},responseTime:{type:"number",description:"Response delay time"},timestamp:{type:"number",description:"Request date"}}},500:{description:"Application error!",type:"object",properties:{message:{type:"string",description:"Application error message"},uptime:{type:"number",description:"Time the application has been up"},responseTime:{type:"number",description:"Response delay time"},timestamp:{type:"number",description:"Request date"}}}}};async function _(o){let s=new u;o.get("/profissional/getAll",{schema:R},s.getProfissionais),o.post("/profissional/create",{schema:g},s.postProfissional),o.put("/profissional/update",{schema:g},s.putProfissional)}0&&(module.exports={profissionalRoutes});
